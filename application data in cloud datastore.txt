App Dev: Storing Application Data in Cloud Datastore v1.1

Objective 

	In this lab, you will learn how to perform the following tasks:

	# Harness Cloud Shell as your development environment.

	# Integrate Cloud Datastore into a NodeJS application.


	Task One:

			Previewing the Case Study Application

					In this section, you will access Cloud Shell, clone the git repository containing the Quiz application, and run the application.

					# Clone source code in Cloud Shell

							Step 1 : Login to Google console paltform and activate google cloud shell

							Step 2: In the dialog box display beneath the page click on start cloud shell

							Step 3: Run the below command to clone the repository

									git clone https://github.com/GoogleCloudPlatform/training-data-analyst
							
					# Configure and run the case study application

						After finished cloning the repository, naviate into the repo folder follow the below steps:

							Step 1: navigate into the repository folder using the command below

									  cd ~/training-data-analyst/courses/developingapps/nodejs/datastore/start
							Step 2: To export an environment variable, GCLOUD_PROJECT that references the GCP Project ID, 				execute the following command:

									export GCLOUD_PROJECT=$DEVSHELL_PROJECT_ID

							Step 3: To install the application dependencies, execute the following command:

									npm install

									#The installation may take a couple of minutes.

							Step 4: To run the application, execute the following command:

								npm start



					#Review the case study application

						Step 1: In Cloud Shell, click Web preview > Preview on port 8080 to preview the quiz application

								You should see the user interface for the web application. The three main parts to the application are:

									1. Create Question

									2. Take Test

									3. Leaderboard

						Step 2: In the navigation bar, click Create Question.

								please note: You should see a simple form that contains textboxes for the question and answers with 			 radio buttons to select the correct answer.

											 Quiz authors can add questions in this part of the application.

											 This part of the application is written as a server-side web application using the popular Node.js web application framework Express.

						Step 3: In the navigation bar, click Take Test.

								please note: You will be taken to a client application.

						Step 4: In the navigation bar, click GCP

								You should see a sample question.

								Quiz takers can answer questions in this part of the application.

								This part of the application is written as a client-side web application using the popular JavaScript framework AngularJS.

								It receives JSON data from the server and uses JavaScript in the browser to display questions and collect answers.

						Step 5: To return to the server-side application, click on the Quite Interesting Quiz link in the 					navigation bar


					Examining the Case Study Application Code

						Step 1: From Cloud Shell, click Launch code editor.

								The Orion integrated code editor will launch in a separate tab of your browser, along with Cloud Shell


						Step 2: Navigate to the /training-data-analyst/courses/developingapps/nodejs/datastore/start/server 		folder using the file browser panel on the left side of the editor.

								The application is a standard Node.js application written using the popular Express application framework.
					

					Review the Express Web application

						Step 1: Select the .../datastore/start/server/app.js file.

						Step 2: Select the .../datastore/start/server/web-app folder

						Step 3: Select the .../datastore/start/server/web-app/questions.js file.

						Step 4: In the questions.js file, find the handler that responds to HTTP POST requests for the /			questions/add route

						Step 5: Select the .../datastore/start/server/web-app/views folder.

						Step 6: View the .../datastore/start/server/web-app/views/questions/add.pug file

						Step 7: Select the .../datastore/start/server/api/index.js file

						Step 8: Select the .../datastore/start/server/gcp/datastore.js file.


					Adding Entities to Cloud Datastore

							Create an App Engine application to provision Cloud Datastore

									Step 1: Return to Cloud Shell and stop the application by pressing Ctrl+C

									Step 2: To create an App Engine application in your project, execute the following command 		    in Cloud Shell.

											gcloud app create --region "us-central"

							Import and use the NodeJS Datastore module

								Step 1: Open the ...gcp/datastore.js file in the Cloud Shell editor.

								Step 2: Load the config module from the parent folder

								Step 3: Load the @google-cloud/datastore module.

								Step 4: Declare a Datastore client object named ds.

										datastore.js

										// TODO: Load the ../config module

											const config = require('../config');

											// END TODO

											// TODO: Load the @google-cloud/datastore module

											const Datastore = require('@google-cloud/datastore');

											// END TODO

											// TODO: Create a Datastore client object, ds
											// The Datastore(...) factory function accepts an options // object which is used to specify which project's
											// Datastore should be used via the projectId property.
											// The projectId is retrieved from the config module. This // module retrieves the project ID from the GCLOUD_PROJECT // environment variable.

											const ds = Datastore({
											 projectId: config.get('GCLOUD_PROJECT')
											});

										// END TODO

							Write code to create a Cloud Datastore entity

								Step 1: Declare a constant named kind, initialized with the value 'Question'

										datastore.js

										// TODO: Declare a constant named kind
										//The Datastore key is the equivalent of a primary key in a // relational database.
										// There are two main ways of writing a key:
										// 1. Specify the kind, and let Datastore generate a unique //    numeric id
										// 2. Specify the kind and a unique string id

										const kind = 'Question';

										// END TODO

								Step 2: In the create(...) function, remove the existing Promise.resolve({}) placeholder 			statement from the create(...) function.

								Step 3: Declare a constant called key to store the key for this entity.

								Step 4: Declare a constant named entity and initialize it with the key and the quiz question 		 properties extracted from the form data.

								Step 5: Use the Datastore client object (ds) to save the entity by calling the save(entity) 		method.

										datastore.js

										// The create({quiz, author, title, answer1, answer2,
										// answer3, answer4, correctAnswer}) function uses an
										// ECMAScript 2015 destructuring assignment to extract
										// properties from the form data passed to the function

										function create({ quiz, author, title, answer1, answer2,
										                  answer3, answer4, correctAnswer }) {
										 // TODO: Declare the entity key,
										 // with a Datastore generated id

										 const key = ds.key(kind);

										 // END TODO

										 // TODO: Declare the entity object, with the key and data

										 const entity = {
										   key,
										// The entity's members are represented in a data property.
										// This is an array where each element represents one
										// member in the entity. Each element is an object with a // name and a value
										   data: [
										     { name: 'quiz', value: quiz },
										     { name: 'author', value: author },
										     { name: 'title', value: title },
										     { name: 'answer1', value: answer1 },
										     { name: 'answer2', value: answer2 },
										     { name: 'answer3', value: answer3 },
										     { name: 'answer4', value: answer4 },
										     { name: 'correctAnswer', value: correctAnswer },
										   ]
										 };
										 // END TODO

										// TODO: Save the entity, return a promise
										 // The ds.save(...) method returns a Promise to the
										 // caller, as it runs asynchronously.

										 return ds.save(entity);

										 // END TODO
										}


							Run the application and create a Cloud Datastore entity


									Step 1: Save the ...gcp/datastore.js file and then return to the Cloud Shell command 			prompt.

									Step 2: To start the application, execute the following command:

											npm start

									Step 3: In Cloud Shell, click Web preview > Preview on port 8080 to preview the quiz 			application.

									Step 4: Click Create Question.

									Step 5: Complete the form with the following values, and then click Save

											Form Field

											Author : Your Name

											Quiz:   Google Cloud Platform

											Title: Which company owns GCP?

											Answer 1: Amazon

											Answer 2: Google (select the Answer 2 radio button!)

											Answer 3: IBM

											Answer 4: Microsoft

											please note: You should be returned to the home page for the application.

									Step 6: Return to the Cloud Platform Console and, on the Navigation menu, click Datastore.

									Step 7: On the Datastore page, click Entities

											You should see your new question!

							Review

								Choose the two correct options to create a key in Cloud Datastore.

								You can specify the kind and let Cloud Datastore generate a unique numeric ID.
								You can specify the kind and a unique string ID.
								You can ask Cloud Datastore to leave the key as a null value.
								You can create an entity without a key.
								Which method enables you to store entities in Cloud Datastore?

								persist
								save

							Bonus: Querying Cloud Datastore

							Write code to retrieve Cloud Datastore entities

							Step 1: Return to the code editor.

							Step 2: In the ...gcp/datastore.js file, remove the code from the list(quiz)method.

							Step 3: In the ...gcp/datastore.js file, remove the code from the list(quiz)method.

							Step 4: Use the Datastore client to run the query, and assign the returned promise object to a 			constant.

							Step 5: Write a statement to return the promise.

							Step 6: Chain a then(...) method to the promise.

							Step 7: Write an arrow function in the then(...) method to retrieve the response from Cloud 			Datastore.

							Step 8: In the arrow function extract the results from the response.

							Step 9: Reshape the data by adding each entity ID and removing the correct answer from the data 		returned from Cloud Datastore.

							Step 10: Complete the code in the arrow function body to return a page of entities or an object 		 that indicates that this is the last page of results.

						Run the application and test the Cloud Datastore query

							Step 1: Save the ...gcp/datastore.js file, and then return to the Cloud Shell command.

							Step 2: Stop the application by pressing Ctrl+C

							Step 3: Start the application  by running the below command.

									npm start

							Step 4: In Cloud Shell, click Web preview > Preview on port 8080 to preview the quiz application

							Step 5: Replace the querystring at the end of the application's URL with /api/quizzes/gcp

							Step 6: Return to the application home page, and click Take Test.

							Step 7: Click GCP

									You should see that the quiz question has been formatted inside the client-side web application!











						












